'use client';
import React, { useRef, useState, useEffect } from 'react';

const WorkExperience = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const containerRef = useRef<HTMLDivElement>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const pathRef = useRef<SVGPathElement>(null);

  const experiences = [
    {
      company: 'Tech Innovators Inc.',
      period: '2023 - Present',
      role: 'Senior Full Stack Developer',
      description: 'Led development of scalable web applications using React, Node.js, and cloud technologies. Mentored junior developers and optimized system performance.',
    },
    {
      company: 'Digital Solutions Co.',
      period: '2021 - 2023',
      role: 'Frontend Developer',
      description: 'Built responsive user interfaces with React and TypeScript. Collaborated with design teams to implement pixel-perfect designs and improve user experience.',
    },
    {
      company: 'StartUp Ventures',
      period: '2020 - 2021',
      role: 'Junior Developer',
      description: 'Developed mobile-first web applications and contributed to API development. Participated in agile development processes and code reviews.',
    },
    {
      company: 'Freelance Projects',
      period: '2019 - 2020',
      role: 'Web Developer',
      description: 'Created custom websites for small businesses using modern web technologies. Managed client relationships and delivered projects on time.',
    },
  ];

  // Smoothly track scroll progress
  useEffect(() => {
    const scrollEl = scrollAreaRef.current;
    if (!scrollEl) return;

    let ticking = false;

    const onScroll = () => {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          const scrollTop = scrollEl.scrollTop;
          const scrollHeight = scrollEl.scrollHeight - scrollEl.clientHeight;
          const scrollProgress = scrollTop / scrollHeight;

          const index = Math.min(
            experiences.length - 1,
            Math.floor(scrollProgress * experiences.length)
          );
          setCurrentIndex(index);
          ticking = false;
        });
        ticking = true;
      }
    };

    scrollEl.addEventListener('scroll', onScroll);
    return () => scrollEl.removeEventListener('scroll', onScroll);
  }, [experiences.length]);

  const progressRatio = (currentIndex + 1) / experiences.length;

  const getPositionOnPath = (lengthRatio: number) => {
    const path = pathRef.current;
    if (!path) return { x: 0, y: 0 };
    const totalLength = path.getTotalLength();
    return path.getPointAtLength(lengthRatio * totalLength);
  };

  const rockPoint = getPositionOnPath(progressRatio);

  return (
    <div ref={containerRef} className="relative min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 overflow-hidden">
      {/* Stars */}
      <div className="absolute inset-0 z-0">
        {[...Array(50)].map((_, i) => (
          <div
            key={i}
            className="absolute w-1 h-1 bg-white rounded-full opacity-70"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 3}s`
            }}
          />
        ))}
      </div>

      {/* Scrollable content */}
      <div ref={scrollAreaRef} className="relative z-10 h-screen overflow-y-scroll snap-y snap-mandatory">
        <div className="min-h-[300vh] p-12 grid grid-cols-1 lg:grid-cols-2 gap-12 items-start">
          {/* Left content */}
          <div className="sticky top-0 h-screen flex flex-col justify-center">
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-4">
              Work Experience
            </h2>
            <div className="w-24 h-1 bg-gradient-to-r from-purple-400 to-pink-400 mb-12"></div>

            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20 shadow-2xl transition-all">
              <h3 className="text-2xl font-bold text-white mb-2">{experiences[currentIndex].company}</h3>
              <p className="text-purple-300 font-semibold">{experiences[currentIndex].role}</p>
              <p className="text-purple-200 mb-4">{experiences[currentIndex].period}</p>
              <p className="text-gray-200">{experiences[currentIndex].description}</p>
            </div>

            {/* Dots */}
            <div className="flex space-x-2 mt-8">
              {experiences.map((_, index) => (
                <div
                  key={index}
                  className={`h-2 rounded-full transition-all duration-300 ${
                    index === currentIndex ? 'bg-purple-400 w-8' : 'bg-white/30 w-2'
                  }`}
                />
              ))}
            </div>
          </div>

          {/* Right side - Sisyphus SVG */}
        {/* Right side - Sisyphus SVG */}
<div className="top-0 h-screen flex items-center justify-center bg-black/20 backdrop-blur-md rounded-xl p-4">
  <svg
    viewBox="0 0 400 400"
    preserveAspectRatio="xMidYMid meet"
    className="w-full max-w-xl h-auto"
  >
    <defs>
      <linearGradient id="mountainGrad" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" stopColor="#4a5568" />
        <stop offset="50%" stopColor="#2d3748" />
        <stop offset="100%" stopColor="#1a202c" />
      </linearGradient>
      <linearGradient id="rockGrad" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" stopColor="#718096" />
        <stop offset="100%" stopColor="#4a5568" />
      </linearGradient>
    </defs>

    {/* Mountain path */}
    <path
      ref={pathRef}
      d="M 50 350 Q 100 300 150 280 Q 200 250 250 240 Q 300 220 350 200"
      stroke="transparent"
      fill="none"
      strokeWidth="10"
    />

    {/* Mountain fill */}
    <polygon
      points="0,400 50,350 100,300 150,280 200,250 250,240 300,220 350,200 400,180 400,400"
      fill="url(#mountainGrad)"
    />

    {/* Boulder */}
    <circle
      cx={rockPoint.x}
      cy={rockPoint.y}
      r="12"
      fill="url(#rockGrad)"
      style={{ transition: 'all 0.3s ease-out' }}
    />

    {/* Sisyphus */}
    <g
      transform={`translate(${rockPoint.x - 20}, ${rockPoint.y})`}
      style={{ transition: 'all 0.3s ease-out' }}
    >
      <ellipse cx="0" cy="0" rx="8" ry="12" fill="#d69e2e" opacity="0.9" />
      <circle cx="0" cy="-15" r="6" fill="#f7fafc" opacity="0.9" />
      <line x1="-5" y1="-5" x2="15" y2="-10" stroke="#d69e2e" strokeWidth="3" strokeLinecap="round" />
      <line x1="-5" y1="0" x2="15" y2="-5" stroke="#d69e2e" strokeWidth="3" strokeLinecap="round" />
      <line x1="-3" y1="8" x2="-8" y2="20" stroke="#d69e2e" strokeWidth="3" strokeLinecap="round" />
      <line x1="3" y1="8" x2="8" y2="20" stroke="#d69e2e" strokeWidth="3" strokeLinecap="round" />
    </g>
  </svg>
</div>

        </div>
      </div>
    </div>
  );
};

export default WorkExperience;
